!function(I){var g={};function C(n){if(g[n])return g[n].exports;var t=g[n]={i:n,l:!1,exports:{}};return I[n].call(t.exports,t,t.exports,C),t.l=!0,t.exports}C.m=I,C.c=g,C.d=function(I,g,n){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:n})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var n=Object.create(null);if(C.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var t in I)C.d(n,t,function(g){return I[g]}.bind(null,t));return n},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s=5)}({5:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./view/brainbox/src/tools/freeform.js\nfunction freeform(annotation, path, username) {\n    let tr; // the object that will go into the table\n    let obj; // the object that will go into the database\n\n    // configure table row\n    tr = "<td contentEditable=true class=\'noEmpty\'></td>";\n\n    // configure database object\n    obj = {\n        typeOfBinding:2,\n        path: path,\n        format: function(e, d) {\n            if(typeof d.data === \'undefined\') {\n                e.get(0).innerHTML = "";\n            } else {\n                e.get(0).innerHTML = \'<span>\'+d.data+\'</span>\';\n            }\n        },\n        parse: function(e, d) {\n            const obj = d;\n            obj.modified = (new Date()).toJSON();\n            obj.modifiedBy = username;\n            obj.data = e.get(0).textContent;\n            return obj;\n        }\n    };\n\n    return {tr, obj};\n}\n\n// CONCATENATED MODULE: ./view/brainbox/src/tools/hidden.js\nfunction hidden_freeform(annotation, path, username) {\n    let tr; // the object that will go into the table\n    let obj; // the object that will go into the database\n\n    // configure table row\n    tr = "<td contentEditable=true class=\'hidden\'></td>";\n\n    // configure database object\n    obj = {\n        typeOfBinding:2,\n        path: path,\n        format: function(e, d) {\n            if(typeof d.data === \'undefined\') {\n                e.get(0).innerHTML = "";\n            } else {\n                e.get(0).innerHTML = \'<span>\'+d.data+\'</span>\';\n            }\n        },\n        parse: function(e, d) {\n            const obj = d;\n            obj.modified = (new Date()).toJSON();\n            obj.modifiedBy = username;\n            obj.data = e.get(0).textContent;\n            return obj;\n        }\n    };\n\n    return {tr, obj};\n}\n\n// CONCATENATED MODULE: ./view/brainbox/src/tools/multiple.js\nfunction multiple(annotation, path, username) {\n    let tr = []; // the object that will go into the table\n    let obj; // the object that will go into the database\n    const values = annotation.values.split(/[, ]+/);\n\n    // configure table row\n    tr.push("<td><select value=0><option value=\'\' disabled selected hidden>Empty</option>");\n    for (var o in values) {\n        tr.push("<option value=\\"" + values[o] + "\\"" + ">" + values[o] + "</option>");\n    }\n    tr.push("</select></td>");\n    tr = tr.join("\\n");\n\n    // configure database object\n    obj = {\n        typeOfBinding:2,\n        path: path,\n        format: function(e, d) {\n            var obj = d;\n            if (typeof obj.data !== \'undefined\') {\n                /**\n                 * @todo Replace color assignment by the addition of a class\n                 */\n                e.get(0).querySelectorAll("select")[0].style.color = "#fff"; \n                e.get(0).querySelectorAll("select")[0].value = obj.data; \n            } else {\n                e.get(0).querySelectorAll("select")[0].value = ""; \n            }\n        },\n        parse: function(e, d) {\n            if (e.get(0).querySelectorAll("select")[0].value) {\n                e.get(0).querySelectorAll("select")[0].style.color = "#fff";\n            }\n            const obj = d;\n            obj.modified = (new Date()).toJSON();\n            obj.modifiedBy = username;\n            obj.data = e.get(0).querySelectorAll("select")[0].value;\n            return obj;\n        }\n    };\n\n    return {tr, obj};\n}\n\n\n\n// CONCATENATED MODULE: ./view/brainbox/src/pages/project-page.js\n\n\n\n\nconst projShortname = projectInfo.shortname;\nconst numFilesQuery = 20;\nconst annotations = {\n    text: [],   // collect text annotations\n    volume: []  // collect volume annotations\n};\nlet k, h, str, found, annType, annName, file;\nconst info_proxy = {};\nlet trTemplate;\nlet objTemplate;\nlet aParam;\nlet hashOld;\n\n\n// Prevent zoom on double tap\n$(\'body\').on(\'touchstart\', function preventZoom(e) {\n    var t2 = e.timeStamp\n      , t1 = $(this).data(\'lastTouch\') || t2\n      , dt = t2 - t1\n      , fingers = e.originalEvent.touches.length;\n    $(this).data(\'lastTouch\', t2);\n    if (!dt || dt > 500 || fingers > 1) return; // not double-tap\n    e.preventDefault(); // double tap - prevent the zoom\n    // also synthesize click events we just swallowed up\n    $(this).trigger(\'click\').trigger(\'click\');\n});\n\n// collect the project\'s text annotations\nfor(k=0;k<projectInfo.annotations.list.length;k++) {\n    if (projectInfo.annotations.list[k].type === "text" |\n        projectInfo.annotations.list[k].type === "hidden text" |\n        projectInfo.annotations.list[k].type === "multiple choices") {\n        $("#projectFiles thead tr").append("<th>" + projectInfo.annotations.list[k].name + "</th>");\n        annotations.text.push(projectInfo.annotations.list[k]);\n    }\n}\n// collect the project\'s volume annotations\nfor(k=0;k<projectInfo.annotations.list.length;k++) {\n    if (projectInfo.annotations.list[k].type === "volume") {\n        annotations.volume.push(projectInfo.annotations.list[k]);\n    }\n}\n\n$("#projectName").text(projectInfo.name);\n\n$("#resizeButton").data({flag:-1,x0:0,y0:0});\n$("#resizeButton").on(\'mousedown touchstart\',function(e){$(this).data({flag:0,x0:e.pageX,y0:e.pageY})});\n$("body").on(\'mousemove\',function(e){resizeButton({x:e.pageX,y:e.pageY})});\n$("body").on(\'touchmove\',function(e){resizeButton({x:e.originalEvent.changedTouches[0].pageX,y:e.originalEvent.changedTouches[0].pageY})});\n$("body").on(\'mouseup touchend\',function(e){$("#resizeButton").data({flag:-1})});\n\n$("#addProject").click(function(){location="/project/new"});\n$("#settings").click(function(){\n    var pathname=location.pathname;\n    if(pathname.slice(-1)=="/")\n        location=pathname+"settings";\n    else\n        location=pathname+"/settings";\n});\n\n\n// Init BrainBox\n//---------------\n    BrainBox.initBrainBox()\n    .then(function from_project(){\n        return BrainBox.loadLabelsets();\n    })\n    .then(function () {\n        // Bind the project\'s files to the table within #projectFiles\n        //------------------------------------------------------------\n        trTemplate = [\'<tr>\'];\n        objTemplate = [];\n\n        // configure the binding template for table row and object.\n        // the 1st two columns are fixed: name and source\n        trTemplate.push(["<td contentEditable=true class=\'noEmpty\'></td>"]);\n        objTemplate.push({ typeOfBinding: 2, path: "files.list.#.name"});\n\n        trTemplate.push(["<td><a></a></td>"]);\n        objTemplate.push({\n            typeOfBinding:1,\n            path:"files.list.#.source",\n            format:function(e, d){\n                $(e).find("a").prop("href", location.origin+"/mri?url=" + d);\n                $(e).find("a").html(d.split("/").pop());\n            }\n        });\n\n        // the following columns are completed from the project\'s \'annotations\' definitions:\n        // determine their type of display (either select or freeform at the moment) based data type\n        let g;\n        for(g=0; g<annotations.text.length; g++) {\n            // annType = Object.prototype.toString.call(annotations.text[g].values); // a better object type description\n            annType = annotations.text[g].type;\n            annName = annotations.text[g].name;\n\n            if(annType === "multiple choices") { // "[object Array]") {\n                // array of values\n                let {tr, obj} = multiple(\n                    annotations.text[g],\n                    "files.list.#.mri.annotations." + projShortname + "." + annName,\n                    AtlasMakerWidget.User.username\n                );\n                trTemplate.push(tr);\n                objTemplate.push(obj);\n            } else if(annType === "text") { //"[object String]" || annotations.text[g].values === "freeform") {\n                // freeform text\n                let {tr, obj} = freeform(\n                    annotations.text[g],\n                    "files.list.#.mri.annotations." + projShortname + "." + annName,\n                    AtlasMakerWidget.User.username\n                );\n                trTemplate.push(tr);\n                objTemplate.push(obj);\n            } else if(annType === "hidden text") { //"[object String]" || annotations.text[g].values === "freeform") {\n                // freeform text\n                let {tr, obj} = hidden_freeform(\n                    annotations.text[g],\n                    "files.list.#.mri.annotations." + projShortname + "." + annName,\n                    AtlasMakerWidget.User.username\n                );\n                trTemplate.push(tr);\n                objTemplate.push(obj);\n            }\n            /**\n             * @todo This is the place where \'position\' or \'length\' annotations should be added\n             */\n        }\n        trTemplate.push("</tr>");\n        aParam = {\n            table: $("#projectFiles table"),\n            info_proxy: info_proxy,\n            info: projectInfo,\n            trTemplate: trTemplate.join("\\n"),\n            objTemplate: objTemplate\n        };\n    })\n    .then(function() {\n\n        // Append the project files progressively. Start with the 1st #numFilesQuery files, load and\n        // display the 1st file, configure the tools position, and keep querying for the\n        // rest of the files\n        return $.getJSON("/project/json/"+projectInfo.shortname+"/files", {\n            start: 0,\n            length: numFilesQuery\n        })\n    })\n    .then(function(list) {\n        appendFilesToProject(list);\n        \n        // mark first row as selected\n        $("#projectFiles tbody tr:eq(0)").addClass("selected");\n    })\n    .then(function from_project(){return loadProjectFile(0)})\n    .then(function from_project(){\n        $("#tools-side").detach().appendTo(\'#tools\');\n        // connect colours close button\n        $(document).on(\'click touchstart\', "#labels-close", function(){$("#labelset").hide()});\n    })\n    .then(function() {\n        queryFiles();\n    })\n    .catch( err => {\n        $("#msgLog").html("ERROR: Can\'t load data. " + err);\n        console.error(err);\n    });\n\n// Listen to changes that trigger a metadata save\n//------------------------------------------------\n    // send data when focus is lost (on blur)\n    $(document).on(\'blur\', "#projectFiles table tbody td", function from_project(e) {\n        var index = $(e.target).closest(\'tr\').index();\n        JSON.stringify(info_proxy); // update content of projectInfo object from proxy by calling all getters\n        AtlasMakerWidget.sendSaveMetadataMessage(projectInfo.files.list[index]);\n    });\n    // blur when [enter] is clicked, to trigger data sending\n    $(document).on(\'keydown\', "#projectFiles table tbody td", function(e) {\n        if(e.which==13 && $(e.target).attr(\'contenteditable\')) {\n            e.preventDefault();\n            $(e.target).blur();\n        }\n    });\n    // blur when <select> changes value to trigger data sending\n    $("#projectFiles table tbody").on(\'change\', "select", function(e) {\n        $(e.target).blur();\n    });\n\n// Listen to changes in selected table row\n//----------------------------------------\n    // listen to changes in file selection by clicking on the file table\n    $(document).on(\'click touchstart\', "#projectFiles tbody tr",function() {\n        var table=$(this).closest("table");\n        var currentIndex=$(table).find("tr.selected").index();\n        var index=$(this).index();\n\n        if(index>=0 && currentIndex!=index) {\n            $(table).find("tr").removeClass("selected");\n            $(this).addClass("selected");\n            // remove table with previous annotations\n            $("table#volAnnotations tbody").html("");\n            // load and bind new file\n            loadProjectFile(index);\n        }\n    });\n\n    // listen to changes in file selection by pressing the up/down arrows\n    $(document).on(\'keydown\', function(e){\n        var table=$("#projectFiles tbody");\n        var index=$(table).find("tr.selected").index();\n    \n        if(e.keyCode!=38 && e.keyCode!=40)\n            return;\n\n        switch(e.keyCode) {\n            case 38: // up\n                index=(index+projectInfo.files.list.length-1)%projectInfo.files.list.length;\n                break;\n            case 40: // down\n                index=(index+1)%projectInfo.files.list.length;\n                break;\n        }\n        $(table).find("tr").removeClass("selected");\n        $(table).find("tr:eq("+index+")").addClass("selected");\n    \n        // remove table with previous annotations\n        $("table#volAnnotations tbody").html("");\n\n        // load and bind new file\n        loadProjectFile(index);\n    });\n\n    // listen to changes in selected volume annotation\n    $(document).on(\'click touchstart\', "#volAnnotations tbody tr", function () {\n        var table=$(this).closest("tbody");\n        var currentIndex=$(table).find("tr.selected").index();\n        var index=$(this).index();\n\n        if(index>=0 && currentIndex!=index) {\n            $(table).find("tr").removeClass("selected");\n            $(this).addClass("selected");\n    \n            var iarr,found=false;\n            for(iarr=0;iarr<BrainBox.info.mri.atlas.length;iarr++) {\n                if(BrainBox.info.mri.atlas[iarr].name==annotations.volume[index].name\n                    && BrainBox.info.mri.atlas[iarr].project==projectInfo.shortname) {\n                    found=true;\n                    break;\n                }\n            }\n            if(found)\n                AtlasMakerWidget.configureAtlasMaker(BrainBox.info,iarr);\n            else\n                console.log("ERROR: A quite unexpected one too...");\n        }\n    });\n\n// Functions\n//----------\nfunction queryFiles() {\n    $.getJSON("/project/json/"+projectInfo.shortname+"/files", {\n        start: projectInfo.files.list.length,\n        length: numFilesQuery\n    })\n    .then(function(list) {\n        if(list.length) {\n            appendFilesToProject(list);\n            queryFiles();\n        } else {\n            console.log("All files downloaded. Length:",projectInfo.files.list.length);\n        }\n    })\n}\nfunction appendFilesToProject(list) {\n    var i0, i, j;\n    \n    i0 = projectInfo.files.list.length;\n    projectInfo.files.list.push.apply(projectInfo.files.list, list);\n    \n    // make sure that all mri files have a text annotations object for the project\n    for(i=0;i<list.length;i++) {\n        file = projectInfo.files.list[i0+i];\n        if (!(file.mri)) {\n            file.mri = {};\n        }\n        if (!(file.mri.annotations)) {\n            file.mri.annotations = {};\n        }\n        if (!(file.mri.annotations[projShortname])) {\n            file.mri.annotations[projShortname] = {};\n        }\n    }\n    // initialise the relevant annotation entries in each mri file if required\n    for(i=0;i<list.length;i++) {\n        file = projectInfo.files.list[i0+i];\n        for(j=0;j<annotations.text.length;j++) {\n            annName = annotations.text[j].name;\n            if(!file.mri.annotations[projShortname][annName]) {\n                var date=new Date();\n                file.mri.annotations[projShortname][annName] = {\n                    created: date.toJSON(),\n                    modified: date.toJSON(),\n                    modifiedBy: AtlasMakerWidget.User.username,\n                    type: "text"\n                };\n            }\n        }\n    }\n    for(var i=0;i<list.length;i++) {\n        BrainBox.appendAnnotationTableRow(i0+i,aParam);\n    }\n}\n\n/**\n * @func loadProjectFile\n * @desc load a new mri from the project list\n */\nfunction loadProjectFile(index) {\n    return new Promise(function(resolve, reject) {\n        var url=projectInfo.files.list[index].source;\n        var params={url:url,view:"cor",slice:180,fullscreen:false};\n        $("#loadingIndicator p").text("Loading...");\n        $("#loadingIndicator").show();\n\n        /**\n         * @todo The mri entry may correspond to a file that has not been downloaded yet!\n         */\n        var info = projectInfo.files.list[index];\n\n        if($.isEmptyObject(info) === false) {\n            // check if the mri contains the required annotations\n            var irow; // index of the table row\n            var iarr; // index of the object in the data array\n            for(irow=0;irow<annotations.volume.length;irow++) {\n                found = false;\n                if(!info.mri.atlas)\n                    info.mri.atlas = [];\n                for(iarr=0;iarr<info.mri.atlas.length;iarr++) {\n                    if(annotations.volume[irow].name == info.mri.atlas[iarr].name\n                       && projectInfo.shortname == info.mri.atlas[iarr].project) {\n                        found=true;\n                        break;\n                    }\n                }\n                // if it doesn\'t, create them\n                if(found == false) {\n                    // add annotation\n                    var date=new Date();\n                    // add data to annotations array\n                    var atlas = {\n                        name: annotations.volume[irow].name,\n                        project: projectInfo.shortname,\n                        created: date.toJSON(),\n                        modified: date.toJSON(),\n                        modifiedBy: AtlasMakerWidget.User.username,\n                        filename: Math.random().toString(36).slice(2)+".nii.gz",\t// automatically generated filename\n                        labels: annotations.volume[irow].values,\n                        owner: AtlasMakerWidget.User.username,\n                        type: "volume"\n                    };\n\n                    projectInfo.files.list[index].mri.atlas.push(atlas);\n                }\n\n                annotations.volume[irow].annotationItemIndex=iarr;\n            }\n            params.info=projectInfo.files.list[index];\n\n            if(annotations.volume[0]) {\n                params.annotationItemIndex = annotations.volume[0].annotationItemIndex;\n            } else {\n                params.annotationItemIndex = -1;\n            }\n\n            BrainBox.configureBrainBox(params)\n            .then(function from_project(){\n\n                // bind volume annotations to table#volAnnotations\n                var annvol_proxy={};\n                var aParam = {\n                    table: $("table#volAnnotations"),\n                    info_proxy: annvol_proxy,\n                    info: BrainBox.info,\n                    trTemplate: $.map([\n                        "<tr>",\n                        " <td></td>",           // volume name\n                        " <td></td>",\t        // volume label set\n                        "</tr>"],function(o){return o}).join(),\n                    objTemplate: [\n                        {\ttypeOfBinding:1,\n                            path:"mri.atlas.#.name"\n                        },\n                        {\ttypeOfBinding:1,\n                            path:"mri.atlas.#.labels"\n                        }\n                    ]\n                };\n\n                // add and bind new table row\n                for(irow=0;irow<annotations.volume.length;irow++) {\n                    BrainBox.appendAnnotationTableRow2(irow,annotations.volume[irow].annotationItemIndex,aParam);\n                }\n                // update in server\n                saveAnnotations(aParam);\n\n                // select the first annotation by default\n                // (should be read from project settings)\n                $("#annotations tbody tr:eq(0)").addClass("selected");\n\n                AtlasMakerWidget.User.projectPage = projectInfo.shortname;\n                AtlasMakerWidget.sendUserDataMessage(JSON.stringify({projectPage:projectInfo.shortname}));\n\n                resolve();\n            });\n        } else {\n            var msg=AtlasMakerWidget.container.find("#text-layer");\n            msg.html("<text x=\'5\' y=\'15\' fill=\'white\'>ERROR: File is unreadable</text>");\n            console.log("ERROR: Cannot read data. The file is maybe corrupt?");\n\n            reject();\n        }\n    });\n}\nfunction saveAnnotations(param) {\n    JSON.stringify(param.info_proxy); // update BrainBox.info from info_proxy\n    AtlasMakerWidget.sendSaveMetadataMessage(BrainBox.info);\n    hashOld=BrainBox.hash(JSON.stringify(BrainBox.info));\n}\n/**\n * @func resizeButton\n * @desc Resize left tool bar\n */\nfunction resizeButton(p) {\n    if($("#resizeButton").data("flag")==0) {\n        $("#resizeButton").data({flag:1,x0:p.x,y0:p.y});\n    } else if($("#resizeButton").data("flag")==1) {\n        var d=$("#resizeButton").data("x0")-p.x;\n        $("#left").css({\'flex-basis\':$("#left").width()-d});\n        $("#resizeButton").data({x0:p.x,y0:p.y});\n        AtlasMakerWidget.resizeWindow();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')}});